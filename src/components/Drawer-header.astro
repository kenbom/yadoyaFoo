---
import { Image } from 'astro:assets';
import imageOpen from '../assets/open.svg';
import imageClose from '../assets/close.svg';
---

<header class="Header">
  <!-- <nav-custom-element> -->
    <button
      type="button"
      class="Header-button js-openDrawer"
      aria-controls="drawer"
      aria-expanded="false"
    >
      <Image
        src={imageOpen}
        class="Header-button-image"
        alt={'ナビゲーションを開く'}
        width="24"
        height="18"
      />
    </button>
  <!-- </nav-custom-element> -->
</header>
<div id="drawer" class="Drawer js-drawer" aria-expanded="false">
  <div class="Drawer-backdrop js-backdrop"></div>
  <nav class="Drawer-nav Nav">
    <!-- <nav-custom-element> -->
      <button
        type="button"
        class="Nav-button js-closeDrawer"
        aria-controls="drawer"
        aria-expanded="false"
      >
        <Image
          src={imageClose}
          class="Nav-button-image"
          alt={'ナビゲーションを閉じる'}
          width="18"
          height="18"
        />
      </button>
    <!-- </nav-custom-element> -->
    <ul class="Nav-list">
      <li class="Nav-item">
        <a href="/" class="Nav-link">トップ</a>
      </li>
      <li class="Nav-item">
        <a href="/about/" class="Nav-link">ふうのご紹介</a>
      </li>
      <li class="Nav-item">
        <a href="/around/" class="Nav-link">近場のお楽しみ</a>
      </li>

      <li class="Nav-item">
        <a href="/littleFar/" class="Nav-link">足をのばせば</a>
      </li>
    </ul>
  </nav>
</div>

<style>
  html {
  }

  .Header {
    position: fixed;
    top: 0;
    right: 0;
    width: 100%;
    height: 60px;
  }

  .Drawer {
    position: fixed;
    z-index: 0;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
  }

  .Drawer-backdrop {
    position: absolute;
    z-index: -1;
    top: 0;
    right: 0;
    width: 40%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
  }

  .Drawer-nav {
    position: fixed;
    top: 0;
    right: 0;
    height: 100%;
    width: 280px;
  }

  .Nav {
    overflow: auto;
  }

  .Drawer[aria-expanded] {
    transition-property: visibility;
    transition-duration: 0.25s;
  }

  .Drawer[aria-expanded] .Drawer-backdrop {
    transition-property: opacity;
    transition-duration: 0.25s;
    transition-timing-function: linear;
  }

  .Drawer[aria-expanded] .Drawer-nav {
    transition-property: transform;
    transition-duration: 0.25s;
    transition-timing-function: ease;
  }

  /* 開いているとき */
  .Drawer[aria-expanded='true'] {
    visibility: visible;
  }

  .Drawer[aria-expanded='true'] .Drawer-backdrop {
    opacity: 1;
  }

  .Drawer[aria-expanded='true'] .Drawer-nav {
    transform: translateX(0);
  }

  /* 閉じているとき */
  .Drawer[aria-expanded='false'] {
    visibility: hidden;
  }

  .Drawer[aria-expanded='false'] .Drawer-backdrop {
    opacity: 0;
  }

  .Drawer[aria-expanded='false'] .Drawer-nav {
    transform: translateX(100%);
  }

  .Nav-list {
    position: fixed;
    top: 20;
    right: 0;
  }

  .Header-button js-openDrawer {
    position: absolute;
    right: 0;
    top: 0;
    padding: 10px;
  }
  .Header-button-image {
    position: absolute;
    top: 0;
    right: 0;
    margin-right: 20px;
    margin-top: 10px;
  }
  .Nav-button js-closeDrawer {
    position: absolute;
    right: 0;
    top: 0;
    padding: 10px;
  }

  .Nav-button-image {
    margin-left: 250px;
    margin-top: 10px;
  }

  .Nav-item {
    color: #fafafa;
    padding: 10px;
  }
</style>

<script>
  class NavCustomElement extends HTMLElement {
    constructor() {
      super();
      // ボタンと本体
      const openButton = this.querySelector('.js-openDrawer');
      const drawer = document.querySelector('.js-drawer');
      const closeButton = drawer.querySelector('.js-closeDrawer');
      const backdrop = drawer.querySelector('.js-backdrop');

      // 現在の状態（開いていたらtrue）
      let drawerOpen = false;

      // stateは真偽値
      function changeAriaExpanded(state) {
        const value = state ? 'true' : 'false';
        drawer.setAttribute('aria-expanded', value);
        openButton.setAttribute('aria-expanded', value);
        closeButton.setAttribute('aria-expanded', value);
      }

      // stateは真偽値
      function changeState(state) {
        if (state === drawerOpen) {
          console.log('2回以上連続で同じ状態に変更しようとしました');
          return;
        }
        changeAriaExpanded(state);
        drawerOpen = state;
      }

      function openDrawer() {
        changeState(true);
      }

      function closeDrawer() {
        changeState(false);
      }

      function onClickOpenButton() {
        openDrawer();
      }

      function onClickCloseButton() {
        closeDrawer();
      }

      openButton.addEventListener('click', onClickOpenButton, false);
      closeButton.addEventListener('click', onClickCloseButton, false);
      backdrop.addEventListener('click', onClickCloseButton, false);
    }
  }

  customElements.define('nav-custom-element', NavCustomElement);
</script>
